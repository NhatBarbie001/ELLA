import torch
from models.resnet import Reduced_ResNet18, SupConResNet, ContrastiveLR
from torchvision import transforms
import torch.nn as nn


default_trick = {'labels_trick': False, 'kd_trick': False, 'separated_softmax': False,
                 'review_trick': False, 'ncm_trick': False, 'kd_trick_star': False}


input_size_match = {
    'cifar100': [3, 32, 32],
    'cifar10': [3, 32, 32],
    'core50': [3, 128, 128],
    'mini_imagenet': [3, 84, 84],
    'openloris': [3, 50, 50],
    'vfn': [3, 224, 224],
    'imagenet_subset': [3,224,224]
}


n_classes = {
    'cifar100': 100,
    'cifar10': 10,
    'core50': 50,
    'mini_imagenet': 100,
    'openloris': 69,
    'vfn': 74,
    'imagenet_subset':100
}


transforms_match = {
    'core50': transforms.Compose([
        transforms.ToTensor(),
        ]),
    'cifar100': transforms.Compose([
        transforms.ToTensor(),
        ]),
    'cifar10': transforms.Compose([
        transforms.ToTensor(),
        ]),
    'mini_imagenet': transforms.Compose([
        transforms.ToTensor()]),
    'openloris': transforms.Compose([
            transforms.ToTensor()]),
    'imagenet_subset': transforms.Compose([
        transforms.ToPILImage(),
        transforms.RandomResizedCrop(224),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.5071, 0.4866, 0.4409], [0.2009, 0.1984, 0.2023])
    ]),
    'vfn': transforms.Compose([
        transforms.ToPILImage(),
        transforms.RandomResizedCrop(224),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])
    ])
}

#cifar100
# 'lt': [21, 36, 13, 344, 171, 10, 7, 24, 15, 14, 77, 7, 434, 6, 38, 328, 149, 12, 67, 85, 33, 19, 13, 477, 
# 9, 206, 226, 48, 135, 42, 273, 11, 61, 11, 378, 32, 10, 237, 248, 64, 7, 74, 17, 30, 12, 44, 197, 
# 314, 118, 40, 89, 6, 260, 18, 5, 5, 5, 455, 25, 23, 70, 179, 98, 9, 163, 102, 8, 188, 5, 500, 8, 
# 142, 216, 6, 299, 286, 56, 156, 123, 58, 27, 20, 93, 29, 361, 26, 15, 396, 112, 415, 46, 53, 16, 
#  6, 81, 22, 129, 51, 35, 107],  # rho = 0.01

                            # 'lt': [21, 36, 13, 344, 171, 10, 7, 24, 15, 14, 77, 7, 434, 6, 38, 328, 149, 12, 67, 85, 33, 19, 13, 477, 
                            # 9, 206, 226, 48, 135, 42, 273, 11, 61, 11, 378, 32, 10, 237, 248, 64, 7, 74, 17, 30, 12, 44, 197, 
                            # 314, 118, 40, 89, 6, 260, 18, 5, 5, 5, 455, 25, 23, 70, 179, 98, 9, 163, 102, 8, 188, 5, 500, 8, 
                            # 142, 216, 6, 299, 286, 56, 156, 123, 58, 27, 20, 93, 29, 361, 26, 15, 396, 112, 415, 46, 53, 16, 
                            # 6, 81, 22, 129, 51, 35, 107],  # rho = 0.01
 # #rho = 0.03
                  #'lt': [46.0, 17.0, 363.0, 66.0, 68.0, 283.0, 179.0, 326.0, 246.0, 53.0, 304.0, 85.0, 16.0, 273.0, 264.0, 139.0, 79.0, 21.0, 28.0, 23.0, 29.0, 43.0, 221.0, 160.0, 229.0, 57.0, 199.0, 82.0, 22.0, 255.0, 500.0, 88.0, 71.0, 166.0, 31.0, 376.0, 433.0, 192.0, 112.0, 32.0, 16.0, 482.0, 48.0, 36.0, 91.0, 18.0, 22.0, 172.0, 76.0, 125.0, 144.0, 293.0, 315.0, 155.0, 117.0, 44.0, 121.0, 130.0, 105.0, 55.0, 25.0, 73.0, 449.0, 15.0, 41.0, 50.0, 24.0, 59.0, 17.0, 64.0, 404.0, 149.0, 15.0, 19.0, 26.0, 94.0, 39.0, 134.0, 27.0, 61.0, 37.0, 101.0, 338.0, 109.0, 30.0, 19.0, 35.0, 418.0, 40.0, 390.0, 98.0, 465.0, 20.0, 237.0, 185.0, 33.0, 206.0, 350.0, 51.0, 213.0],          
                            
                            # #rho = 0.07
                            #'lt': [102.0, 92.0, 145.0, 235.0, 87.0, 255.0, 223.0, 43.0, 35.0, 35.0, 80.0, 97.0, 284.0, 48.0, 325.0, 108.0, 372.0, 382.0, 206.0, 50.0, 36.0, 217.0, 334.0, 414.0, 161.0, 403.0, 343.0, 425.0, 248.0, 74.0, 76.0, 461.0, 134.0, 53.0, 292.0, 63.0, 137.0, 123.0, 500.0, 175.0, 352.0, 180.0, 437.0, 262.0, 56.0, 44.0, 166.0, 41.0, 362.0, 300.0, 449.0, 38.0, 316.0, 72.0, 127.0, 70.0, 185.0, 66.0, 61.0, 99.0, 117.0, 94.0, 195.0, 473.0, 130.0, 269.0, 111.0, 64.0, 153.0, 308.0, 211.0, 170.0, 120.0, 52.0, 190.0, 89.0, 200.0, 84.0, 45.0, 59.0, 114.0, 276.0, 78.0, 55.0, 49.0, 149.0, 392.0, 58.0, 68.0, 229.0, 37.0, 40.0, 42.0, 82.0, 486.0, 105.0, 141.0, 47.0, 157.0, 242.0],

                            # #rho = 0.1
                            # 'lt': [54.0, 201.0, 52.0, 79.0, 405.0, 254.0, 66.0, 415.0, 61.0, 102.0, 336.0, 139.0, 53.0, 135.0, 237.0, 183.0, 56.0, 74.0, 488.0, 179.0, 306.0, 344.0, 260.0, 159.0, 387.0, 132.0, 321.0, 85.0, 369.0, 112.0, 87.0, 51.0, 63.0, 232.0, 58.0, 156.0, 75.0, 105.0, 110.0, 70.0, 93.0, 455.0, 221.0, 64.0, 69.0, 98.0, 396.0, 67.0, 286.0, 500.0, 273.0, 149.0, 72.0, 142.0, 192.0, 95.0, 126.0, 445.0, 60.0, 152.0, 197.0, 115.0, 378.0, 226.0, 361.0, 248.0, 57.0, 118.0, 188.0, 77.0, 299.0, 89.0, 211.0, 424.0, 91.0, 292.0, 206.0, 163.0, 279.0, 167.0, 352.0, 216.0, 145.0, 328.0, 466.0, 50.0, 171.0, 107.0, 243.0, 175.0, 477.0, 266.0, 83.0, 123.0, 434.0, 314.0, 81.0, 129.0, 100.0, 121.0]
#rho = 0.005
                            # 'lt': [38.0, 277.0, 5.0, 3.0, 24.0, 72.0, 26.0, 27.0, 100.0, 69.0, 425.0, 362.0, 29.0, 52.0, 30.0, 
                            # 4.0, 13.0, 162.0, 32.0, 2.0, 34.0, 403.0, 19.0, 58.0, 2.0, 65.0, 308.0, 3.0, 5.0, 138.0, 47.0, 17.0, 
                            # 20.0, 12.0, 18.0, 5.0, 146.0, 4.0, 154.0, 21.0, 343.0, 6.0, 190.0, 10.0, 224.0, 7.0, 111.0, 3.0, 8.0, 
                            # 201.0, 16.0, 42.0, 131.0, 124.0, 22.0, 236.0, 14.0, 23.0, 2.0, 212.0, 81.0, 62.0, 90.0, 3.0, 263.0, 3.0, 
                            # 13.0, 8.0, 50.0, 325.0, 473.0, 449.0, 180.0, 95.0, 382.0, 44.0, 11.0, 292.0, 500.0, 85.0, 6.0, 11.0, 105.0, 
                            # 6.0, 40.0, 117.0, 4.0, 171.0, 4.0, 76.0, 249.0, 9.0, 9.0, 55.0, 36.0, 5.0, 2.0, 7.0, 10.0, 15.0],

                            

class_distribution_table = {
                            
                            # 'lt': [54.0, 201.0, 52.0, 79.0, 405.0, 254.0, 66.0, 415.0, 61.0, 102.0, 336.0, 139.0, 53.0, 135.0, 237.0, 183.0, 56.0, 74.0, 488.0, 179.0, 306.0, 344.0, 260.0, 159.0, 387.0, 132.0, 321.0, 85.0, 369.0, 112.0, 87.0, 51.0, 63.0, 232.0, 58.0, 156.0, 75.0, 105.0, 110.0, 70.0, 93.0, 455.0, 221.0, 64.0, 69.0, 98.0, 396.0, 67.0, 286.0, 500.0, 273.0, 149.0, 72.0, 142.0, 192.0, 95.0, 126.0, 445.0, 60.0, 152.0, 197.0, 115.0, 378.0, 226.0, 361.0, 248.0, 57.0, 118.0, 188.0, 77.0, 299.0, 89.0, 211.0, 424.0, 91.0, 292.0, 206.0, 163.0, 279.0, 167.0, 352.0, 216.0, 145.0, 328.0, 466.0, 50.0, 171.0, 107.0, 243.0, 175.0, 477.0, 266.0, 83.0, 123.0, 434.0, 314.0, 81.0, 129.0, 100.0, 121.0],
                            'lt': [21, 36, 13, 344, 171, 10, 7, 24, 15, 14, 77, 7, 434, 6, 38, 328, 149, 12, 67, 85, 33, 19, 13, 477, 
                            9, 206, 226, 48, 135, 42, 273, 11, 61, 11, 378, 32, 10, 237, 248, 64, 7, 74, 17, 30, 12, 44, 197, 
                            314, 118, 40, 89, 6, 260, 18, 5, 5, 5, 455, 25, 23, 70, 179, 98, 9, 163, 102, 8, 188, 5, 500, 8, 
                            142, 216, 6, 299, 286, 56, 156, 123, 58, 27, 20, 93, 29, 361, 26, 15, 396, 112, 415, 46, 53, 16, 
                            6, 81, 22, 129, 51, 35, 107],


                            
                      
                            # [5, 5, 123, 15, 477, 361, 46, 102, 299, 56, 7, 415, 344, 16, 5, 14, 226, 27, 30, 248, 25, 8, 156, 
                            # 36, 26, 85, 12, 89, 135, 18, 6, 20, 44, 93, 7, 23, 29, 149, 328, 12, 53, 74, 216, 70, 58, 260, 33, 
                            # 77, 11, 5, 237, 22, 38, 142, 129, 35, 51, 13, 163, 8, 17, 13, 32, 15, 9, 378, 396, 19, 107, 21, 112, 
                            # 48, 67, 81, 7, 434, 314, 206, 273, 197, 98, 500, 10, 179, 24, 9, 286, 10, 61, 171, 6, 118, 6, 6, 64, 
                            # 188, 42, 40, 455, 11]

                            'ltio': [500, 477, 455, 434, 415, 396, 378, 361, 344, 328, 314, 299, 286, 273, 260, 248, 237, 226, 
                            216, 206, 197, 188, 179, 171, 163, 156, 149, 142, 135, 129, 123, 118, 112, 107, 102, 98, 93, 89, 85, 
                            81, 77, 74, 70, 67, 64, 61, 58, 56, 53, 51, 48, 46, 44, 42, 40, 38, 36, 35, 33, 32, 30, 29, 27, 26, 
                            25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 15, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 
                            7, 7, 6, 6, 6, 6, 5, 5, 5, 5],

                            'conv': [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 
                            500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 
                            500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 
                            500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 
                            500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]
}

class_distribution_table_imagenet = {
                            'lt': [54, 96, 34, 896, 445, 26, 19, 63, 41, 37, 202, 20, 1130, 18, 100, 855, 387, 31, 175, 221, 87, 50, 
                            36, 1240, 24, 537, 589, 127, 353, 110, 710, 30, 160, 28, 983, 83, 27, 617, 647, 167, 18, 193, 45, 79, 32, 
                            115, 512, 816, 307, 105, 232, 15, 677, 47, 14, 13, 14, 1184, 66, 60, 184, 467, 255, 23, 425, 267, 22, 489, 
                            13, 1300, 21, 370, 562, 16, 779, 743, 146, 406, 322, 152, 72, 52, 243, 76, 938, 69, 39, 1030, 293, 1079, 
                            121, 139, 43, 17, 211, 57, 337, 133, 91, 280],

                            'ltio': [1300, 1240, 1184, 1130, 1079, 1030, 983, 938, 896, 855, 816, 779, 743, 710, 677, 647, 617, 589, 
                            562, 537, 512, 489, 467, 445, 425, 406, 387, 370, 353, 337, 322, 307, 293, 280, 267, 255, 243, 232, 221, 
                            211, 202, 193, 184, 175, 167, 160, 152, 146, 139, 133, 127, 121, 115, 110, 105, 100, 96, 91, 87, 83, 79, 
                            76, 72, 69, 66, 63, 60, 57, 54, 52, 50, 47, 45, 43, 41, 39, 37, 36, 34, 32, 31, 30, 28, 27, 26, 24, 23, 22, 
                            21, 20, 19, 18, 18, 17, 16, 15, 14, 14, 13, 13],

                            'conv': [1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
                            1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
                            1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
                            1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
                            1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
                            1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300]
}

class_distribution_table_vfn = {
                    'lt':[3, 23, 6, 35, 19, 7, 87, 5, 10, 4, 124, 14, 3, 1, 14, 63, 7, 2, 40, 58, 35, 37, 11, 10, 22, 6, 108, 14, 3, 
                    20, 114, 16, 26, 10, 10, 9, 6, 16, 66, 19, 58, 7, 16, 25, 66, 11, 14, 13, 8, 104, 60, 27, 1, 7, 29, 4, 95, 288, 
                    4, 33, 62, 8, 20, 14, 10, 24, 80, 6, 16, 6, 120, 46, 66, 15],
                    'ltio':[288, 124, 120, 114, 108, 104, 95, 87, 80, 66, 66, 66, 63, 62, 60, 58, 58, 46, 40, 37, 35, 
                    35, 33, 29, 27, 26, 25, 24, 23, 22, 20, 20, 19, 19, 16, 16, 16, 16, 15, 14, 14, 14, 14, 14, 13, 
                    11, 11, 10, 10, 10, 10, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 5, 4, 4, 4, 3, 3, 3, 2, 1, 1]


}
                            

class_order = {
    'cifar100_conv': [
            68, 56, 78, 8, 23, 84, 90, 65, 74, 76, 40, 89, 3, 92, 55, 9, 26, 80, 43, 38, 58, 70, 77, 1, 85, 19, 17, 50,
            28, 53, 13, 81, 45, 82, 6, 59, 83, 16, 15, 44, 91, 41, 72, 60, 79, 52, 20, 10, 31, 54, 37, 95, 14, 71, 96,
            98, 97, 2, 64, 66, 42, 22, 35, 86, 24, 34, 87, 21, 99, 0, 88, 27, 18, 94, 11, 12, 47, 25, 30, 46, 62, 69,
            36, 61, 7, 63, 75, 5, 32, 4, 51, 48, 73, 93, 39, 67, 29, 49, 57, 33
        ],
    'cifar100_lt': [
            68, 56, 78, 8, 23, 84, 90, 65, 74, 76, 40, 89, 3, 92, 55, 9, 26, 80, 43, 38, 58, 70, 77, 1, 85, 19, 17, 50,
            28, 53, 13, 81, 45, 82, 6, 59, 83, 16, 15, 44, 91, 41, 72, 60, 79, 52, 20, 10, 31, 54, 37, 95, 14, 71, 96,
            98, 97, 2, 64, 66, 42, 22, 35, 86, 24, 34, 87, 21, 99, 0, 88, 27, 18, 94, 11, 12, 47, 25, 30, 46, 62, 69,
            36, 61, 7, 63, 75, 5, 32, 4, 51, 48, 73, 93, 39, 67, 29, 49, 57, 33
        ],
    'cifar100_ltio': [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
            57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
             84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
        ],
    'imagenet_subset_conv': [
            68, 56, 78, 8, 23, 84, 90, 65, 74, 76, 40, 89, 3, 92, 55, 9, 26, 80, 43, 38, 58, 70, 77, 1, 85, 19, 17, 50,
            28, 53, 13, 81, 45, 82, 6, 59, 83, 16, 15, 44, 91, 41, 72, 60, 79, 52, 20, 10, 31, 54, 37, 95, 14, 71, 96,
            98, 97, 2, 64, 66, 42, 22, 35, 86, 24, 34, 87, 21, 99, 0, 88, 27, 18, 94, 11, 12, 47, 25, 30, 46, 62, 69,
            36, 61, 7, 63, 75, 5, 32, 4, 51, 48, 73, 93, 39, 67, 29, 49, 57, 33
        ],
    'imagenet_subset_lt': [
            68, 56, 78, 8, 23, 84, 90, 65, 74, 76, 40, 89, 3, 92, 55, 9, 26, 80, 43, 38, 58, 70, 77, 1, 85, 19, 17, 50,
            28, 53, 13, 81, 45, 82, 6, 59, 83, 16, 15, 44, 91, 41, 72, 60, 79, 52, 20, 10, 31, 54, 37, 95, 14, 71, 96,
            98, 97, 2, 64, 66, 42, 22, 35, 86, 24, 34, 87, 21, 99, 0, 88, 27, 18, 94, 11, 12, 47, 25, 30, 46, 62, 69,
            36, 61, 7, 63, 75, 5, 32, 4, 51, 48, 73, 93, 39, 67, 29, 49, 57, 33
        ],
    'imagenet_subset_ltio': [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
            57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
             84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
        ],
    'vfn_lt': [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
            57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73
    ],
    'vfn_ltio': [
        70, 28, 63, 20, 33, 57, 7, 64, 51, 65, 1, 40, 68, 73, 43, 12, 58, 71, 18, 15, 21, 19, 45, 49, 29, 60, 4, 42, 69, 31, 
        3, 37, 25, 48, 50, 52, 62, 36, 11, 32, 16, 56, 35, 26, 10, 46, 39, 44, 53, 5, 14, 24, 72, 55, 23, 66, 6, 0, 67, 22, 
        13, 54, 30, 41, 47, 27, 8, 59, 34, 61, 2, 17, 9, 38]
}



task_order = {
    'vfn' : [14, 10, 10, 10, 10, 10, 10],
    'cifar100' : [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
    
    'imagenet_subset10' : [10,10,10,10,10,10,10,10,10,10],
    'imagenet_subset20' : [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
    'cifar_lfh':[50,5,5,5,5,5,5,5,5,5,5],
    'im_subset_lfh':[50,5,5,5,5,5,5,5,5,5,5]
}


def setup_architecture(params):
    nclass = n_classes[params.data]
    backbone = getattr(params, 'backbone', 'reduced_resnet18')
    if params.agent in ['SCR']:
        if params.data == 'mini_imagenet':
            return SupConResNet(640, head=params.head, nclass=nclass, backbone=backbone)
        # elif params.data == 'vfn':
        #     model = SupConResNet(160, head=params.head, nclass=nclass, backbone=backbone)
            # model.linear = nn.Linear(2560, 74, bias=True)
            return model
        return SupConResNet(head=params.head, nclass=nclass, backbone=backbone)
    
    if params.agent == 'ELLA':
        return ContrastiveLR(head=params.head, nclass=nclass, backbone=backbone)
    
    if params.agent == 'DELTA':
        return ContrastiveLR(head=params.head, nclass=nclass, backbone=backbone)
    if params.data == 'cifar100':
        return Reduced_ResNet18(nclass)
    elif params.data == 'cifar10':
        return Reduced_ResNet18(nclass)
    elif params.data == 'core50':
        model = Reduced_ResNet18(nclass)
        model.linear = nn.Linear(2560, nclass, bias=True)
        return model
    elif params.data == 'mini_imagenet':
        model = Reduced_ResNet18(nclass)
        model.linear = nn.Linear(640, nclass, bias=True)
        return model
    elif params.data == 'openloris':
        return Reduced_ResNet18(nclass)
    elif params.data == 'vfn':
        return Reduced_ResNet18(74)


def setup_opt(optimizer, model, lr, wd):
    if optimizer == 'SGD':
        optim = torch.optim.SGD(model.parameters(),
                                lr=lr,
                                weight_decay=wd)
    elif optimizer == 'Adam':
        optim = torch.optim.Adam(model.parameters(),
                                 lr=lr,
                                 weight_decay=wd)
    else:
        raise Exception('wrong optimizer name')
    return optim


